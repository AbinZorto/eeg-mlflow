# Window-Level Model Configuration

# Data Configuration
data:
  feature_path: "data/processed/features/window_features.parquet"
  split:
    test_size: 0.2
    random_state: 42
    stratify: true

# Model Configuration
model:
  name: "window_model"
  type: "random_forest"  # Options: random_forest, gradient_boosting, logistic_regression, svm
  
  params:
    random_forest:
      n_estimators: 200
      min_samples_leaf: 20
      max_features: 'sqrt'
      class_weight: 'balanced'
      random_state: 42
    
    gradient_boosting:
      n_estimators: 200
      learning_rate: 0.1
      max_depth: 5
      min_samples_leaf: 10
      random_state: 42
    
    logistic_regression:
      max_iter: 1000
      class_weight: 'balanced'
      penalty: 'l2'
      C: 1.0
      random_state: 42
    
    svm:
      kernel: 'rbf'
      C: 1.0
      class_weight: 'balanced'
      probability: true
      random_state: 42

# Window-to-Patient Aggregation
aggregation:
  method: "majority_vote"  # Options: majority_vote, mean_probability
  threshold: 0.5
  min_confidence: 0.6

# Cross Validation
cv:
  method: "logo"  # Leave-One-Group-Out
  n_splits: null  # Determined by number of patients
  shuffle: true
  random_state: 42

# Output Configuration
output:
  path: "models/window_level"
  save_predictions: true
  save_probabilities: true
  feature_importance: true
  performance_plots: true

# MLflow Tracking
mlflow:
  experiment_name: "window_level_training"
  tracking_uri: "mlruns"
  register_model: true
  model_stage: "Development"

# Evaluation Metrics
metrics:
  window_level:
    - accuracy
    - precision
    - recall
    - f1
    - roc_auc
  patient_level:
    - accuracy
    - precision
    - recall
    - f1
    - roc_auc

# Logging Configuration
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/window_training.log"
  console: true